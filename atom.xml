<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexs&#39; Blog</title>
  
  <subtitle>好好学习，天天向上!</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-09-04T16:24:19.304Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>hexs</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python基础</title>
    <link href="http://example.com/2021/08/22/Python%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2021/08/22/Python%E5%9F%BA%E7%A1%80/</id>
    <published>2021-08-22T01:55:00.000Z</published>
    <updated>2021-09-04T16:24:19.304Z</updated>
    
    <content type="html"><![CDATA[<p>简单总结了Python的基础知识！<br>包括变量、字符串、数据、循环、判断、列表、字典、函数、类。</p><span id="more"></span><h1 id="出世-基于Python3"><a href="#出世-基于Python3" class="headerlink" title="出世(基于Python3)"></a>出世(基于Python3)</h1><h2 id="hello-world-py"><a href="#hello-world-py" class="headerlink" title="hello_world.py"></a>hello_world.py</h2><ul><li> 使用Python编写一个在屏幕上显示消息”Hello world!”的程序，将会给你带来好运</li></ul>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello Python world!&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ul><li>Python中定义变量时，不用强调该变量的类型</li><li>变量名只能包含字母、数字、下划线。变量名可以字母或下划线打头，但不能以数字开头</li><li>变量名不能包含空格</li><li>变量名不能使用Python关键字和函数名</li></ul><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><ul><li><p>在Python中，用引号括起的都是字符串，引号可以是单引号，也可以是双引号，<strong>注意引号的匹配</strong></p></li><li><p>Python使用制表符(\t)或换行符(\n)添加空白</p></li><li><p>使用方法修改字符串大小写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># titile()方法以首字母大写的方式显示每个单词</span></span><br><span class="line"><span class="comment"># upper()方法将字符串改为全大写</span></span><br><span class="line"><span class="comment"># lower()方法将字符串改为全小写</span></span><br></pre></td></tr></table></figure></li><li><p>通过split()方法用指定分隔符对字符串进行拆分，并将这些部分都存储到一个列表中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;Joker is me! \nJoker is me! \nJoker is me!&quot;</span></span><br><span class="line"><span class="comment"># 以空格为分隔符，包括换行符&quot;\n&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.split()) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 以空格为分隔符，将字符串分为两个</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.split(<span class="string">&quot; &quot;</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure></li><li><p>通过eval()函数用来执行一个字符串表达式，并返回表达式的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># eval实现字符串转化</span></span><br><span class="line">&gt;&gt;&gt;number_lsit= <span class="string">&quot;1+2+3+4-1&quot;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="built_in">eval</span>(number_list))</span><br><span class="line"><span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># eval实现字符串转为列表</span></span><br><span class="line">&gt;&gt;&gt;number_list = <span class="string">&quot;[1, 2, 3 ,4]&quot;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="built_in">eval</span>(number_list))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># eval实现字符串转为字典</span></span><br><span class="line">&gt;&gt;&gt;number_dictionary = <span class="string">&quot;&#123;&#x27;name&#x27;: &#x27;Jack&#x27;,&#x27;age&#x27;: 8&#125;&quot;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="built_in">eval</span>(number_dictionary))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用引号反转</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;&#x27;1 + 2&#x27;&quot;</span>))</span><br><span class="line"><span class="number">1</span> + <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>合并字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python使用+拼接字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串乘法</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a&quot;</span> * <span class="number">10</span>) <span class="comment"># aaaaaaaaaa</span></span><br></pre></td></tr></table></figure></li><li><p>删除空白</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rstrip()方法删除字符串末尾的空白</span></span><br><span class="line"><span class="comment"># lstrip()方法删除字符串开头的空白</span></span><br><span class="line"><span class="comment"># strip()方法删除字符串两端的空白</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h1><h2 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h2><ul><li><p>在 Python中，可对整数执行加(+)减(-)乘(*)除(/)运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="number">2</span> + <span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">3</span> - <span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">3</span> * <span class="number">2</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">3</span> / <span class="number">2</span></span><br><span class="line"><span class="number">1.5</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">3</span> // <span class="number">2</span>   <span class="comment"># 整数除法返回向下取整后的结果</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>在Python中，使用两个乘号表示乘方</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="number">3</span> ** <span class="number">2</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">10</span> ** <span class="number">6</span></span><br><span class="line"><span class="number">1000000</span></span><br></pre></td></tr></table></figure></li><li><p>在Python中，可以使用括号来修改运算次序</p></li></ul><h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><ul><li>Python将带小数点的数字都叫浮点数</li><li>str()函数将非字符串值表示为字符串</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>在Python中，注释用井号(#)标识</li></ul><h1 id="Python之禅"><a href="#Python之禅" class="headerlink" title="Python之禅"></a>Python之禅</h1><ul><li>在Python解释器中执行import this可以获取有关编写优秀Python代码的指导原则</li></ul><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="列表简介"><a href="#列表简介" class="headerlink" title="列表简介"></a>列表简介</h2><ul><li><p>列表由一系列按特定顺序排列的元素组成，在Python中，用方括号([])表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bicycles.py</span></span><br><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python打印列表的内部表示，包括方括号</span></span><br><span class="line"><span class="built_in">print</span>(bicycles)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求获取列表元素，Python只返回该元素，不包括方括号和引号</span></span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过list()方法将字符串转化为列表</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;-600&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">str</span>)) <span class="comment"># [&#x27;-&#x27;, &#x27;6&#x27;, &#x27;0&#x27;, &#x27;0&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p>列表元素的索引从0开始，在Python中，通过将索引指定为-1，可让Python返回最后一个列表元素，以此类推</p></li><li><p>修改、添加、删除列表元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># motorcycles.py</span></span><br><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改列表中的元素</span></span><br><span class="line">motorcycles[<span class="number">0</span>] = <span class="string">&#x27;ducati&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果知道要删除元素的位置，使用del语句</span></span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过append()方法在列表末尾添加元素</span></span><br><span class="line">motorcycles.append(<span class="string">&#x27;jieda&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过insert()方法在列表任何位置添加元素</span></span><br><span class="line">motorcycles.insert(<span class="number">0</span>, <span class="string">&#x27;yongjiu&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过extend()方法在一个列表末尾添加另一个列表，让两个列表首位相接</span></span><br><span class="line">lst_1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">lst_2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(lst_1.extend(lst_2)) <span class="comment"># [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过copy()方法复制一个列表，复制的列表相当于一个副本(也就是说修改原列表不会改变复制后的列表)</span></span><br><span class="line">motorcycles_1 = motorcycles.copy()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过count()方法统计某个元素在列表中出现的次数，若没有找到列表元素，则会返回0</span></span><br><span class="line"><span class="built_in">print</span>(motorcycles.count(honda)) <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过index()方法找到列表中某元素第一次出现的索引位置，若指定的值不在列表中，则会抛出异常</span></span><br><span class="line"><span class="built_in">print</span>(motorcycles.index(<span class="string">&#x27;yamaha&#x27;</span>)) <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过sort()方法对列表进行永久排序</span></span><br><span class="line">motorcycles.sort()</span><br><span class="line">motorcycles.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过sorted()函数对列表进行临时排序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(motorcycles))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过reverse()方法对列表进行永久的反转排列</span></span><br><span class="line">motorcycles.reverse()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过len()函数可以获悉列表的长度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(motorcycles))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过pop()方法可删除列表末尾的元素，并让你能够接着使用它</span></span><br><span class="line"><span class="comment"># 可以将列表看作一个栈，使用pop()弹出末尾的元素，但末尾元素并未被删除</span></span><br><span class="line"><span class="comment"># 通过pop()方法可删除任意位置的元素，只需要说明元素的索引</span></span><br><span class="line">popped_motorcycle = motorcycles.pop()</span><br><span class="line"><span class="built_in">print</span>(popped_motorcycle)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不知道要删除元素的位置，只知道要删除元素的值，使用remove()方法，并且仍可接着使用它</span></span><br><span class="line">motorcycles.remove(<span class="string">&#x27;ducati&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过clear()方法清楚列表中的所有内容</span></span><br><span class="line">motorcycles.clear()</span><br><span class="line"><span class="built_in">print</span>(motocycles) <span class="comment"># []</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="操作列表"><a href="#操作列表" class="headerlink" title="操作列表"></a>操作列表</h2><ul><li><p>使用Python中的for循环遍历列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># magicians.py</span></span><br><span class="line">magicians = [<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;david&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>]</span><br><span class="line"><span class="comment"># 在for magician in magicians:后面，每个缩进的代码都是循环的一部分</span></span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians:</span><br><span class="line"><span class="built_in">print</span>(magician)</span><br></pre></td></tr></table></figure></li><li><p>创建数字列表，Python中，range()函数能够生成一系列数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># numbers.py</span></span><br><span class="line"><span class="comment"># range()函数让Python从指定的第一个值开始数，并在到达指定的第二个值后停止</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 使用list()函数将range()的结果直接转换为列表，将range()作为list()的参数</span></span><br><span class="line">numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(numbers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用range()函数可以指定步长</span></span><br><span class="line">even_number = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">2</span>,<span class="number">11</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(even_number)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个列表，其中包含前10个整数的平方</span></span><br><span class="line">squares = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    square = value ** <span class="number">2</span></span><br><span class="line">    squares.append(square)</span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure></li><li><p>对数字列表执行统计</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;digitals = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">min</span>(digitals)</span><br><span class="line"><span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">max</span>(digitals)</span><br><span class="line"><span class="number">9</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">sum</span>(digitals)</span><br><span class="line"><span class="number">45</span></span><br></pre></td></tr></table></figure></li><li><p><strong>列表解析</strong>将for循环和创建新元素的代码合并成一行，并自动附加新元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># squares.py</span></span><br><span class="line"><span class="comment"># 创建一个列表，包含[1,10]的整数的平方</span></span><br><span class="line">squares = [value ** <span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br></pre></td></tr></table></figure></li></ul><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><ul><li><p>Python可以处理列表的部分元素，称为切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># players.py</span></span><br><span class="line">players = [<span class="string">&#x27;qiaofeng&#x27;</span>, <span class="string">&#x27;ouyangxiu&#x27;</span>, <span class="string">&#x27;guojing&#x27;</span>, <span class="string">&#x27;huangrong&#x27;</span>, <span class="string">&#x27;zhoubotong&#x27;</span>, <span class="string">&#x27;wangchongyang&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片赋值</span></span><br><span class="line">players[<span class="number">3</span>:] = [<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players) <span class="comment"># [&#x27;qiaofeng&#x27;, &#x27;ouyangxiu&#x27;, &#x27;guojing&#x27;, &#x27;zhangsan&#x27;, &#x27;lisi&#x27;, &#x27;zhoubotong&#x27;, &#x27;wangchongyang&#x27;]</span></span><br><span class="line">players[<span class="number">3</span>:<span class="number">3</span>] = <span class="string">&quot;four&quot;</span></span><br><span class="line"><span class="built_in">print</span>(players) <span class="comment"># [&#x27;qiaofeng&#x27;, &#x27;ouyangxiu&#x27;, &#x27;guojing&#x27;, &#x27;huangrong&#x27;, &#x27;f&#x27;, &#x27;o&#x27;, &#x27;u&#x27;, &#x27;r&#x27;, &#x27;zhoubotong&#x27;, &#x27;wangchongyang&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取列表的第2~4个元素</span></span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">1</span>:<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有指定起始索引，Python自动从列表开头开始提取</span></span><br><span class="line"><span class="built_in">print</span>(players[:<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果要让切片止于列表末尾，可以省略终止索引</span></span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">5</span>:]) <span class="comment"># [&#x27;zhoubotong&#x27;, &#x27;wangchongyang&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 负数索引返回离列表末尾相应距离的元素</span></span><br><span class="line"><span class="comment"># 输出名单上最后三名队员</span></span><br><span class="line"><span class="built_in">print</span>(players[-<span class="number">3</span>:])</span><br></pre></td></tr></table></figure></li><li><p>复制列表，可创建一个包含整个列表的切片，切片相当于列表的副本，方法是同时省略起始索引和终止索引([:])</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># foods.py</span></span><br><span class="line">my_foods = [<span class="string">&#x27;coffee&#x27;</span>, <span class="string">&#x27;pizza&#x27;</span>, <span class="string">&#x27;falafel&#x27;</span>]</span><br><span class="line">friends_foods = my_foods[:]</span><br></pre></td></tr></table></figure></li></ul><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><ul><li><p>Python将不能修改的值称为不可变的，而不可变的列表称为元组，元组使用圆括号()标识</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dimensions.py</span></span><br><span class="line">dimensions = (<span class="number">200</span>,<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python指出不能给元组的元素赋值，所以下面一行代码会使Python报告错误</span></span><br><span class="line">dimensions[<span class="number">1</span>] = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将元组强制转换为列表</span></span><br><span class="line"><span class="built_in">print</span>(lsit(dimensions)) <span class="comment"># [&#x27;200&#x27;, &#x27;50&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将列表强制转换为元组</span></span><br><span class="line">lst = [<span class="string">&quot;100&quot;</span>, <span class="string">&quot;200&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(lst)) <span class="comment"># (100, 200)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组乘法</span></span><br><span class="line"><span class="built_in">print</span>((<span class="number">12</span>) * <span class="number">12</span>) <span class="comment"># 144  12后面没有加, 当成一个值处理</span></span><br><span class="line"><span class="built_in">print</span>((<span class="number">12</span>,) * <span class="number">12</span>) <span class="comment"># (12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12)</span></span><br></pre></td></tr></table></figure></li><li><p>修改元组变量，虽然不能修改元组的元素，但可以给存储元组的变量赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># change_dimensions.py</span></span><br><span class="line">dimiensions = (<span class="number">300</span>,<span class="number">50</span>,<span class="number">60</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">    <span class="built_in">print</span>(dimension)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 将新元组存储到变量dimensions中</span></span><br><span class="line">dimensions = (<span class="number">400</span>,<span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">    <span class="built_in">print</span>(dimension)</span><br></pre></td></tr></table></figure></li></ul><h1 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h1><h2 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h2><ul><li><p>条件测试，每条if语的核心都是一个值为True或False的表达式，这种表达式称为条件测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查是否相等</span></span><br><span class="line">&gt;&gt;&gt;car = <span class="string">&#x27;bmw&#x27;</span></span><br><span class="line">&gt;&gt;&gt;car == <span class="string">&#x27;bmw&#x27;</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否不相等</span></span><br><span class="line">requseted_topping = <span class="string">&#x27;mushrooms&#x27;</span></span><br><span class="line"><span class="keyword">if</span> requested_topping != <span class="string">&#x27;achovies&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hold the achovies!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较数字</span></span><br><span class="line">&gt;&gt;&gt;age = <span class="number">18</span></span><br><span class="line">&gt;&gt;&gt;age == <span class="number">18</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;age &lt; <span class="number">21</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;age &lt;= <span class="number">21</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;age &gt; <span class="number">21</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line">&gt;&gt;&gt;age &gt;= <span class="number">21</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用and检查多个条件，两个条件都为True，整个表达式就为True</span></span><br><span class="line">&gt;&gt;&gt;age_0 = <span class="number">22</span></span><br><span class="line">&gt;&gt;&gt;age_1 = <span class="number">18</span></span><br><span class="line">&gt;&gt;&gt;age_0 &gt;= <span class="number">21</span> <span class="keyword">and</span> age_1 &gt;= <span class="number">21</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用or检查多个条件，两个条件至少有一个满足，整个表达式就为True</span></span><br><span class="line">&gt;&gt;&gt;age_0 = <span class="number">22</span></span><br><span class="line">&gt;&gt;&gt;age_1 = <span class="number">18</span></span><br><span class="line">&gt;&gt;&gt;age_0 &gt;= <span class="number">21</span> <span class="keyword">or</span> age_1 &gt;= <span class="number">21</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查特定值是否在列表中，使用关键字in/not in</span></span><br><span class="line">&gt;&gt;&gt;cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, ‘suzuki’]</span><br><span class="line">&gt;&gt;&gt;<span class="string">&#x27;flora&#x27;</span> <span class="keyword">in</span> cars</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 布尔表达式</span></span><br><span class="line">car_edit = <span class="literal">False</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="if语句用法"><a href="#if语句用法" class="headerlink" title="if语句用法"></a>if语句用法</h2><ul><li>if语句，使用if语句处理列表<ul><li>简单的if语句只有一个测试和一个操作</li><li>if-else语句，一种情况和另一种情况</li><li>if-elif-else语句，三种情况</li><li>多个elif语句</li><li>测试多个条件是否满足，使用多条独立的if语句</li></ul></li></ul><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><h2 id="键-值对简介"><a href="#键-值对简介" class="headerlink" title="键-值对简介"></a>键-值对简介</h2><ul><li><p>在Python中，字典是一系列<strong>键-值对</strong>。每个键都与一个值相关联，可以使用键来访问与之相关联的值。与键相关联的值可以是任何Python对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dictionary_name = &#123;<span class="string">&#x27;key&#x27;</span>: value&#125;</span><br><span class="line"><span class="comment"># 访问字典中的值</span></span><br><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(alien_0[<span class="string">&#x27;color&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>修改、添加、删除字典中的键-值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个空字典</span></span><br><span class="line">alien_1 = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加键-值对</span></span><br><span class="line">alien_1[<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;green&#x27;</span></span><br><span class="line">alien_1[<span class="string">&#x27;points&#x27;</span>] = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改字典中的值</span></span><br><span class="line">alien1[<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除键-值对</span></span><br><span class="line"><span class="comment"># 删除的键-值对永远消失了</span></span><br><span class="line"><span class="keyword">del</span> alien1[<span class="string">&#x27;points&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li><p>由类似对象组成字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 规范化格式</span></span><br><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="comment"># 可以在最后一个键-值对后面加上逗号</span></span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="遍历字典与嵌套"><a href="#遍历字典与嵌套" class="headerlink" title="遍历字典与嵌套"></a>遍历字典与嵌套</h2><ul><li><p>遍历字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历字典中所有的键-值对——items()</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> favorite_languages.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nKey: &quot;</span>+key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;value: &quot;</span>+value)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 遍历字典中的所有键——keys()</span></span><br><span class="line"><span class="comment"># keys()方法并非只能用于遍历；它还返回一个列表，其中包含字典中的所有键</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> favorite_languages.keys():</span><br><span class="line">    <span class="built_in">print</span>(key.title())</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 按顺序遍历字典中的所有键</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">sorted</span>(favorite_languages.keys()):</span><br><span class="line">    <span class="built_in">print</span>(key.title())</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 遍历字典中的所有值——values()</span></span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> favorite_languages.values():</span><br><span class="line">    <span class="built_in">print</span>(language.title())</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 可使用集合(set)剔除重复项</span></span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> <span class="built_in">set</span>(favorite_languages.values()):</span><br><span class="line">    <span class="built_in">print</span>(language.title())</span><br></pre></td></tr></table></figure></li><li><p>嵌套</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在列表中存储字典</span></span><br><span class="line">aliens = []</span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    alien = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;slow&#x27;</span>&#125;</span><br><span class="line">    aliens.append(alien)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Total number of aliens: &quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(aliens)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在字典中存储列表——当需要在字典中将一个键关联到多个值时，都可以在字典中嵌套一个列表</span></span><br><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;ruby&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: [<span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: [<span class="string">&#x27;ruby&#x27;</span>, <span class="string">&#x27;go&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> name, languages <span class="keyword">in</span> favorite_languages.items():</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(languages) == <span class="number">1</span>:</span><br><span class="line">        printf(<span class="string">&quot;\n&quot;</span>+name.title()+<span class="string">&quot;&#x27;s favorite_language is&quot;</span> +</span><br><span class="line">              <span class="string">&quot;\n\t&quot;</span>+languages[<span class="number">0</span>].title())</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(languages) &gt; <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>+name.title()+<span class="string">&quot;&#x27;s favorite_languages are:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> language <span class="keyword">in</span> languages:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span>+language.title())</span><br><span class="line">                </span><br><span class="line"><span class="comment"># 在字典中存储字典</span></span><br><span class="line">users = &#123;</span><br><span class="line">    <span class="string">&#x27;aeinstein&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;albert&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;einstein&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;princeton&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    <span class="string">&#x27;mcurie&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;marie&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;curie&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;paris&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> username, user_info <span class="keyword">in</span> users.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nUsername: &quot;</span>+username)</span><br><span class="line">    full_name = user_info[<span class="string">&#x27;first&#x27;</span>]+<span class="string">&quot; &quot;</span>+user_info[<span class="string">&#x27;last&#x27;</span>]</span><br><span class="line">    location = user_info[<span class="string">&#x27;location&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\tFull name: &quot;</span>+full_name.title())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\tLocation: &quot;</span>+location.title())</span><br></pre></td></tr></table></figure></li></ul><h1 id="用户输入和while循环"><a href="#用户输入和while循环" class="headerlink" title="用户输入和while循环"></a>用户输入和while循环</h1><h2 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h2><ul><li><p>input()函数让程序暂停运行，等待用户输入一些文本，获取用户输入后，Python将其存储在一个变量中，以方便使用。Python会将用户输入解读为字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">name = imput(<span class="string">&quot;Please enter your name: &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, &quot;</span>+name)</span><br><span class="line"><span class="comment"># 如果提示超过一行，可将提示存储在一个变量中，再将该变量传递给函数input()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># input()接收多个值</span></span><br><span class="line">number_a, number_b = (<span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="comment"># input()结合split()方法输入一个字符串</span></span><br><span class="line"><span class="comment"># 输入时要以空格为分隔符</span></span><br><span class="line">str_1 = <span class="built_in">input</span>().split()</span><br><span class="line"><span class="comment"># 输入时要以冒号为分隔符</span></span><br><span class="line">str_2 = <span class="built_in">input</span>().split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># input()结合Pytho内置函数mao()</span></span><br><span class="line">number_1, number_2 = <span class="built_in">map</span>(<span class="built_in">eval</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>int()函数将数字的字符串表示 转换为数值表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;age = <span class="built_in">input</span>(<span class="string">&quot;How old are you? &quot;</span>)</span><br><span class="line">How old are you? <span class="number">21</span></span><br><span class="line">&gt;&gt;&gt;age = <span class="built_in">int</span>(age)</span><br><span class="line">&gt;&gt;&gt;age &gt;= <span class="number">18</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><p>求模运算符(%)将两个数相除并返回余数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="number">4</span> % <span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">6</span> % <span class="number">3</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><ul><li><p>while循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个简单的例子</span></span><br><span class="line">current_number = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> current_number &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(current_number)</span><br><span class="line">    current_number += <span class="number">1</span></span><br><span class="line"><span class="comment"># 使用标志——在要求很多条件都满足才能运行的程序中，可定义一个变量，用于判断整个程序是否处于活动状态</span></span><br><span class="line">prompt = <span class="string">&quot;\nTell me something, and I will repeat it back to you:&quot;</span></span><br><span class="line">prompt += <span class="string">&quot;\nEnter &#x27;quit&#x27; to end the programe. &quot;</span></span><br><span class="line">active = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> active:</span><br><span class="line">    message = <span class="built_in">input</span>(prompt)</span><br><span class="line">    <span class="keyword">if</span> message == <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">        active = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure></li><li><p>循环中使用break</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 立即退出while循环，不再运行循环中剩余的代码</span></span><br><span class="line"><span class="comment"># 在任何Python循环中都可以使用break语句</span></span><br></pre></td></tr></table></figure></li><li><p>循环中使用continue</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回到循环开头，并根据条件测试结果决定是否继续执行循环</span></span><br><span class="line"><span class="comment"># counting.py</span></span><br><span class="line">current_number = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> current_number &lt; <span class="number">10</span>:</span><br><span class="line">    current_number += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> current_number % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(current_number)</span><br></pre></td></tr></table></figure></li><li><p>使用while循环处理列表和字典——在遍历的同时进行修改</p></li></ul><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><ul><li><p>在Pyhon中使用关键字def定义一个函数。向Python指出函数名，可能需要在括号内指出其它参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示简单的问候语&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello!&quot;</span>)</span><br><span class="line">greet_user()</span><br><span class="line"><span class="comment"># 文档字符串用三引号，Python使用它们来生成有关程序中函数的文档</span></span><br><span class="line"><span class="comment"># 要调用函数，可依次指定函数名以及括号括号括起的必要信息</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="实参和形参"><a href="#实参和形参" class="headerlink" title="实参和形参"></a>实参和形参</h2><ul><li><p>实参和形参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span>(<span class="params">username</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示简单的问候语&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello, &quot;</span>+username.title()+<span class="string">&quot;!&quot;</span>)</span><br><span class="line">greet_user(<span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line"><span class="comment"># 形参——函数定义时函数名后括号内的参数，也就是username</span></span><br><span class="line"><span class="comment"># 实参——函数调用时传递给函数的信息</span></span><br></pre></td></tr></table></figure></li><li><p>返回值，函数返回的值，在函数中，可使用return语句将值返回到<strong>调用函数的代码行</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回简单值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span>(<span class="params">first_name, last_name</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回整洁的姓名&quot;&quot;&quot;</span></span><br><span class="line">    full_name = first_name+<span class="string">&#x27; &#x27;</span>+last_name</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;hendrix&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回字典</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_person</span>(<span class="params">first_name, last_name</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回一个字典，其中包含有关一个人的信息&quot;&quot;&quot;</span></span><br><span class="line">    person = &#123;<span class="string">&#x27;first&#x27;</span>: first_name, <span class="string">&#x27;last&#x27;</span>: last_name&#125;</span><br><span class="line">    <span class="keyword">return</span> person</span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;hendrix&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br></pre></td></tr></table></figure></li><li><p>传递实参，在调用函数时，Python必须将函数调用中的每个实参都关联到函数定义中的一个形参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 位置实参——最简单的关联方式是基于函数调用中实参的顺序和函数定义中形参的顺序一致</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span>(<span class="params">animal_type, pet_name</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span>+animal_type+<span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;My &quot;</span>+animal_type+<span class="string">&quot;&#x27;s name is &quot;</span>+pet_name.title()+<span class="string">&quot;.&quot;</span>)</span><br><span class="line">describe_pet(<span class="string">&#x27;hamster&#x27;</span>, <span class="string">&#x27;harry&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键字实参——传递给函数的名称-值对，在实参中将名称和值关联起来了</span></span><br><span class="line"><span class="comment"># 默认值——定义函数时，可给每个形参指定默认值。在调用函数中给形参提供了实参时，Python将使用指定的实参值；否则，将使用形参的默认值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span>(<span class="params">pet_name, animal_type=<span class="string">&#x27;dog&#x27;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span>+animal_type+<span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;My &quot;</span>+animal_type+<span class="string">&quot;&#x27;s name is &quot;</span>+pet_name.title()+<span class="string">&quot;.&quot;</span>)</span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;tigger&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传递列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_users</span>(<span class="params">names</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;向列表中的每位用户都发出简单的问候&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        message = <span class="string">&quot;Hello, &quot;</span>+name.title()+<span class="string">&quot;!&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line">usernames = [<span class="string">&#x27;hannah&#x27;</span>, <span class="string">&#x27;ty&#x27;</span>, <span class="string">&#x27;margot&#x27;</span>]</span><br><span class="line">greet_users(usernames)</span><br><span class="line"><span class="comment"># 在函数中对这个列表所做的修改都是永久性的</span></span><br><span class="line"><span class="comment"># 向函数传递列表的副本而不是原件；这样函数所做的任何修改都只影响副本，不影响原件</span></span><br><span class="line">fuction_name(list_name[:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传递任意数量的实参</span></span><br><span class="line"><span class="comment"># *variable_name让Python创建一个名为variable_name的空元组，并将收到的所有值都封装到这个元组中</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuction_name</span>(<span class="params">*variable_name</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># 如果要让函数接收不同类型的实参，必须在函数定义中将接纳任意数量实参的形参放在最后</span></span><br><span class="line"><span class="function"># **<span class="title">varialbe_name</span>让<span class="title">Python</span>创建一个名为<span class="title">variable_name</span>的空字典，并将收到的所有名称-值对都封装到这个字典中</span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">fuction_name</span>(<span class="params">variable1, variable2, **variable_name</span>)</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="导入函数"><a href="#导入函数" class="headerlink" title="导入函数"></a>导入函数</h2><ul><li><p>将函数存储在模块中，import语句允许在当前运行的程序文件中使用模块中的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块时扩展名为.py的文件，包含要导入到程序中的代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入整个模块</span></span><br><span class="line"><span class="keyword">import</span> module_name</span><br><span class="line"><span class="comment"># 导入整个模块，需要使用下面这种语法使用其中任何一个函数</span></span><br><span class="line">module_name.fuction_name()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入特定的函数</span></span><br><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> fuction_name</span><br><span class="line"><span class="comment"># 导入特定的函数，使用函数时就无需使用句点</span></span><br><span class="line">fuction_name()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入模块中的所有函数(不提倡使用)</span></span><br><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 由于导入每个函数，可通过名称来使用每个函数，而无需使用句点表示法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用as给函数指定别名——函数名与程序中现有名称冲突，或者函数名称太长</span></span><br><span class="line"><span class="keyword">from</span> mudule_name <span class="keyword">import</span> fuction_name <span class="keyword">as</span> fn</span><br><span class="line"><span class="comment"># 使用as给模块指定别名</span></span><br><span class="line"><span class="keyword">import</span> module_name <span class="keyword">as</span> mn</span><br></pre></td></tr></table></figure></li></ul><h2 id="函数规范"><a href="#函数规范" class="headerlink" title="函数规范"></a>函数规范</h2><ul><li><p>函数编写指南</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应给函数指定描述性名称，且只在其中使用小写字母和下划线</span></span><br><span class="line"><span class="comment"># 给形参指定默认值时，等号两边不要有空格</span></span><br><span class="line"><span class="comment"># 调用函数时，关键字实参等号两边不要有空格</span></span><br><span class="line"><span class="comment"># 所有的import语句都应该放在文件开头</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="浅谈类"><a href="#浅谈类" class="headerlink" title="浅谈类"></a>浅谈类</h2><ul><li><p>类的特性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在python中，首字母大写的名称指的是类</span></span><br><span class="line"><span class="comment"># 类中的函数称为方法</span></span><br><span class="line"><span class="comment"># __init__()是一个特殊的方法，每当你根据类创建新的实例时，python都会自动运行它</span></span><br><span class="line"><span class="comment"># 每个与类相关联的方法都自动传递实参self，它是一个指向实例本身的引用，让实例能够访问类中的属性和方法</span></span><br><span class="line"><span class="comment"># 以self为前缀的变量都可供类中的所有方法使用，还可以通过类中的任何实例来访问这些变量(而可通过实例访问的变量称为属性)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟小狗的简单测试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化属性name和age&quot;&quot;&quot;</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;模拟小狗被命令时蹲下&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(self.name.title()+<span class="string">&quot; is now sitting.&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll_over</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;模拟小狗被命令时打滚&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(self.name.title()+<span class="string">&quot; rolled over!&quot;</span>)</span><br><span class="line">my_dog = Dog(<span class="string">&#x27;jack&#x27;</span>, <span class="number">6</span>)</span><br><span class="line">my_dog.sit()</span><br><span class="line">my_dog.roll_over()</span><br></pre></td></tr></table></figure></li><li><p>给属性指定默认值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类中的每个属性都必须有初始值，这个值可以是0或字符串</span></span><br><span class="line"><span class="comment"># 在方法__init()__内对某个属性设置默认值，就无需包含为它提供初始值的形参</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, make, model, year</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">self.odometer_reading = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回整洁的描述性信息&quot;&quot;&quot;</span></span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year)+<span class="string">&#x27; &#x27;</span>+self.make+<span class="string">&#x27; &#x27;</span>+self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条指出汽车里程的消息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span>+<span class="built_in">str</span>(self.odometer_reading)+<span class="string">&quot; miles on it.&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>修改属性的值.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接修改属性的值(通过实例直接访问它)</span></span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line">my_new_car.odometer_reading = <span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过方法修改属性的值</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line">    --snip--</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span>(<span class="params">self, mileage</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;将里程表读数设置为指定的值&quot;&quot;&quot;</span></span><br><span class="line">        self.odometer_reading = mileage</span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line">my_new_car.update_odometer(<span class="number">23</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过方法对属性的值进行递增</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line">    --snip--</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span>(<span class="params">self, mileage</span>):</span></span><br><span class="line">        --snip--</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment_odometer</span>(<span class="params">self, miles</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;将里程表读数增加指定的量&quot;&quot;&quot;</span></span><br><span class="line">        self.odometer_reading += miles</span><br><span class="line">my_used_car = Car(<span class="string">&#x27;subaru&#x27;</span>, <span class="string">&#x27;outback&#x27;</span>, <span class="number">2013</span>)</span><br><span class="line">my_used_car.update_odometer(<span class="number">23500</span>)</span><br><span class="line">my_used_car.increment_odometer(<span class="number">100</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li><p>继承，如果你要编写的类是另一个现成类的特殊版本，就使用继承</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个类继承另一个类时，它将自动获得另一个类的所有属性和方法</span></span><br><span class="line"><span class="comment"># 原有的类称为父类，而新类称为子类</span></span><br><span class="line"><span class="comment"># 子类继承了父类的所有属性和方法，同时还可以定义自己的属性和方法</span></span><br><span class="line"><span class="comment"># super()作为一个特殊函数，将父类和子类关联起来，让python调用父类的方法__init__()</span></span><br><span class="line"><span class="comment"># 重写父类的方法，在子类中定义一个与要重写的父类方法同名的方法，python将不会考虑这个父类方法，只关注你在子类中定义的相应方法</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将实例用作属性</span></span><br><span class="line">calss Car():</span><br><span class="line">    --snip--</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Battery</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, battery_size = <span class="number">70</span></span>):</span></span><br><span class="line">        slef.battery_size = battery_size</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe_battery</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has a &quot;</span> +<span class="built_in">str</span>(self.battery_size)+ <span class="string">&quot;-kWh battery.&quot;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span>(<span class="params">Car</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;电动汽车的独特之处&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, make, model, year</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化父类的属性&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(make, model, year)</span><br><span class="line">        self.battery = Battery()</span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="comment"># python在实例my_tesla中查找属性battery，并对存储在该属性中的battery实例调用方法describe_battery()</span></span><br><span class="line">my_tesla.battery.describe_battery()</span><br></pre></td></tr></table></figure></li></ul><h2 id="导入类"><a href="#导入类" class="headerlink" title="导入类"></a>导入类</h2><ul><li><p><a href="https://pymotw.com/">Python标准库</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从一个模块导入单个类</span></span><br><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> ClassName</span><br><span class="line"><span class="comment"># 从一个模块导入多个类</span></span><br><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> ClassName, OtherClassName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入整个模块</span></span><br><span class="line"><span class="keyword">import</span> module_name</span><br><span class="line"><span class="comment"># 使用一下语法访问需要的类</span></span><br><span class="line">module_name.ClassName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入模块中的所有类(不提倡使用这种导入方式)</span></span><br><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在一个模块导入另一个模块</span></span><br></pre></td></tr></table></figure></li><li><p>类编码风格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类名采用驼峰命名法，即将类名中的每个单词的首字母大写、且不使用下划线；实例名和模块名都采用小写，并在单词之间加上下划线</span></span><br><span class="line"><span class="comment"># 对于每个类，紧跟在类定义后面包含一个文档字符串，简要描述类功能；对于每个模块都应包含一个文档字符串，对其中的类可用于干什么进行描述</span></span><br><span class="line"><span class="comment"># 在类中，使用一个空行来分隔方法；在模块中，使用两个空行来分隔类</span></span><br><span class="line"><span class="comment"># 需同时导入标准库中的模块和自己编写的模块时，先导入前者，再添加一个空行，再导入后者</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="文件和异常"><a href="#文件和异常" class="headerlink" title="文件和异常"></a>文件和异常</h1><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h3><ul><li><p>相对路径和绝对路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 相对路径</span></span><br><span class="line">相对于当前运行的程序所在目录下的路径</span><br><span class="line"><span class="comment"># 绝对路径</span></span><br><span class="line">将文件在计算机中准确位置描述出来</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Linux下</span></span><br><span class="line"><span class="comment"># 举例填写快递地址，假如你在上海市，给同城的网友寄东西</span></span><br><span class="line">相对路径——/上海市/黄浦区/淮海中路/xxx号</span><br><span class="line">绝对路径——/中国/上海市/黄浦区/淮海中路/xxx号</span><br></pre></td></tr></table></figure></li></ul><h3 id="从文件中读取数据"><a href="#从文件中读取数据" class="headerlink" title="从文件中读取数据"></a>从文件中读取数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取文本文件时，Python将其中的所有文本都解读为字符串</span></span><br><span class="line"><span class="comment"># 函数open()接受一个参数：要打开文件的名称，返回一个表示文件的对象。函数close()不推荐使用</span></span><br><span class="line"><span class="comment"># 关键字with在不再需要访问文件后将其关闭。使用with，open()返回的对象只在with代码块中可用</span></span><br><span class="line"><span class="comment"># 函数read()读取文件的全部内容，是一个长字符串。read()到达文件末尾时返回一个空字符串，这个空字符串显示出来就是一个空行</span></span><br><span class="line"><span class="comment"># 方法readlines()从文件中读取每一行</span></span><br></pre></td></tr></table></figure><p>file_reader.py文件的路径: /python_work</p><p>pi_digits.txt文件的路径: /python_work/text_files</p><p><strong>p_digits.txt</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3.1415926535</span><br><span class="line">  8979323846</span><br><span class="line">  2643383279</span><br></pre></td></tr></table></figure><p><strong>file_reader.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;text_files/tpidigits.txt&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="comment"># 读取整个文件</span></span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    <span class="built_in">print</span>(contents)</span><br><span class="line">    <span class="comment"># 逐行读取</span></span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    <span class="built_in">print</span>(line.rstrip())</span><br></pre></td></tr></table></figure><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开文件时，可指定读取模式(&#x27;r&#x27;)、写入模式(&#x27;w&#x27;)、附加模式(&#x27;a&#x27;)、读取和写入文件的模式(&#x27;r+&#x27;)。Python默认以只读模式打开文件</span></span><br><span class="line"><span class="comment"># 以写入模式打开文件要注意如果指定的文件已存在，Python将在返回文件对象前清空该文件</span></span><br><span class="line"><span class="comment"># Python只能将字符串写入文本文件。要将数值数据存储到文本文件中，必须使用str()将其转换为字符串格式</span></span><br></pre></td></tr></table></figure><p><strong>write_message.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">&#x27;programming.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">&quot;I love Python!&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="谈异常"><a href="#谈异常" class="headerlink" title="谈异常"></a>谈异常</h3><ul><li><p>Python使用被称为<strong>异常</strong>的特殊对象来管理程序执行期间发生的错误。</p></li><li><p>若程序没有语法和逻辑上的错误，程序依赖外部因素，如用户输入、存在指定的文件、有网络链接，就i有可能出现异常</p></li><li><p>异常可以避免程序崩溃，让程序继续运行，同时可以不让用户看到traceback</p></li><li><p>在Python中，<strong>pass</strong>语句可在代码块中使用它来让Python什么都不做</p></li><li><p><strong>try-except-else代码块</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    --snip--</span><br><span class="line"><span class="keyword">except</span> Error:</span><br><span class="line">    --snip--</span><br><span class="line">    <span class="comment"># pass </span></span><br><span class="line"><span class="comment"># 依赖于try代码块成功执行的代码都放到else代码块中    </span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    --snip--</span><br></pre></td></tr></table></figure></li></ul><h3 id="处理两个异常"><a href="#处理两个异常" class="headerlink" title="处理两个异常"></a>处理两个异常</h3><h4 id="处理ZeroDivisionError异常"><a href="#处理ZeroDivisionError异常" class="headerlink" title="处理ZeroDivisionError异常"></a>处理ZeroDivisionError异常</h4><ul><li>将一个数字除以0会引发错误</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Give me two numbers, and I&#x27;ll divide them.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Enter &#x27;q&#x27; to quit&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    first_number = <span class="built_in">input</span>(<span class="string">&quot;\nFirst number:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number = <span class="built_in">input</span>(<span class="string">&quot;Second number:&quot;</span>)</span><br><span class="line">   <span class="keyword">try</span>:</span><br><span class="line">        answer = <span class="built_in">float</span>(First_number) / <span class="built_in">int</span>(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t divide by 0!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(answer) </span><br></pre></td></tr></table></figure><h4 id="处理FlieNotFoundError异常"><a href="#处理FlieNotFoundError异常" class="headerlink" title="处理FlieNotFoundError异常"></a>处理FlieNotFoundError异常</h4><ul><li>使用文件时，一种常见的问题是找不到文件：你要查找的文件可能在其他地方、文件名可能不正确或者这个文件根本不存在</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">&#x27;alice.txt&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">        contents = file_object.read()</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    message = <span class="string">&quot;Sorry, the file &quot;</span> + filename + <span class="string">&quot; does not exist.&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><h2 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h2><ul><li>用户关闭程序时，我们总是要保存他们提供的信息，模块json能将简单的Python数据结构转储到文件中，并在程序再次运行时加载该文件中的数据</li></ul><h3 id="json-sump"><a href="#json-sump" class="headerlink" title="json.sump()"></a>json.sump()</h3><p>函数json.dump()来存储数据。函数json.dump()接受两个实参：<strong>要存储的数据以及可用于存储数据的文件对象</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># number_write.py</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">numbers = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">filename = <span class="string">&#x27;numbers.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    json.dump(numbers, file_object)</span><br></pre></td></tr></table></figure><h3 id="json-load"><a href="#json-load" class="headerlink" title="json.load()"></a>json.load()</h3><p>函数json.load()来读取数据。函数json.load()接受一个实参：<strong>用于存储数据的文件对象</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># number_read.py</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">filename = <span class="string">&#x27;numbers.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    numbers = json.load(file_object)</span><br><span class="line"><span class="built_in">print</span>(numbers)</span><br></pre></td></tr></table></figure><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><ul><li><p>代码能够正常运行，但可做进一步的改进——将代码划分为一系列完成具体工作的函数。这个过程称为<strong>重构</strong></p></li><li><p>一个重构后的程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_storted_username</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;如果存储了用户名，就获取它&quot;&quot;&quot;</span></span><br><span class="line">    filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">            username = json.load(file_object)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_new_username</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;提示输入用户名&quot;&quot;&quot;</span></span><br><span class="line">    username = <span class="built_in">input</span>(<span class="string">&quot;What is your name?&quot;</span>)</span><br><span class="line">    filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">        json.dump(username, file_object)</span><br><span class="line">    <span class="keyword">return</span> username</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;问候用户，并指出其名字&quot;&quot;&quot;</span></span><br><span class="line">    username = get_sorted_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Welcome back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = get_new_username()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;We will remember you when you come back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>[美]埃里克·马瑟斯 2016-07 《Python编程：从入门到实践》 人民邮电出版社</li><li><a href="https://pymotw.com/">Python标准库</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单总结了Python的基础知识！&lt;br&gt;包括变量、字符串、数据、循环、判断、列表、字典、函数、类。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="Python3" scheme="http://example.com/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>关于博客</title>
    <link href="http://example.com/2021/08/21/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2021/08/21/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-08-21T01:22:52.000Z</published>
    <updated>2021-08-23T14:13:50.970Z</updated>
    
    <content type="html"><![CDATA[<p>本站点主要记录自己学习pwn的过程，和一些与pwn相关的知识。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本站点主要记录自己学习pwn的过程，和一些与pwn相关的知识。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
